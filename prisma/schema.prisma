datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}


generator client {
  provider = "prisma-client-js"
}

model User {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String    @unique
  profile              String
  password             String
  telephone            String    @default("")
  adress               String    @default("")
  isEmailConfirmed Boolean @default(false)
  confirmationToken String?
  role                 UserRole  @default(CUSTOMER) // Utilisation de l'énum avec valeur par défaut
  resetPasswordToken   String?   @unique
  resetPasswordExpires DateTime?
  provider          String   @default("local")
  orders               Order[]
  cart                 Cart?
  reviews              Review[]
  products             Product[]
  Address              Address[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model Product {
  id               Int            @id @default(autoincrement())
  uiid              String   @default(uuid())
  name             String
  description      String
  price            Float
  stock            Int
  imageUrl         String         @default("") // Field to store the image link
  categoryId       Int
  category         Category       @relation(fields: [categoryId], references: [id])
  reviews          Review[]
  cartItems        CartItem[]
  cyloneOffer      CyloneOffer[]
  orderItems       OrderItem[]
  createdBy        Int
  admin            User           @relation(fields: [createdBy], references: [id])
  colors           Color[]        @relation("ProductColors")
  feature           Feature[]     @relation("ProductFeatures")
  sizes            Size[]         @relation("ProductSizes")
  additionalImages ProductImage[] // Relation to additional images
  offer            String? // Champs pour ajouter une offre spéciale, facultatif
  discount         Float? // Champs pour ajouter un rabais, facultatif
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  OffreVisible     OffreVisible[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
   uiid              String   @default(uuid())
  imageUrls String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Color {
  id        Int     @id @default(autoincrement())
  uiid              String   @default(uuid())
  name      String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, name: "ProductColors")
}


model Feature {
  id        Int     @id @default(autoincrement())
  uiid      String   @default(uuid())
  name      String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, name: "ProductFeatures")
}

model Size {
  id        Int     @id @default(autoincrement())
   uiid              String   @default(uuid())
  name      String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, name: "ProductSizes")
}

model Category {
  id        Int       @id @default(autoincrement())
   uiid              String   @default(uuid())
  name      String    @unique
  imageUrl  String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model Order {
  id                Int         @id @default(autoincrement())
   uiid              String   @default(uuid())
  total             Float
  status            String      @default("PENDING") 
  userId            Int
  user              User        @relation(fields: [userId], references: [id])
  addressId         Int
  address           Address     @relation(fields: [addressId], references: [id]) // Associe chaque commande à une adresse
  items             OrderItem[]
  payments          Payment[]
  estimatedDelivery DateTime?   // Champ pour stocker le temps de livraison estimé
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
   uiid              String   @default(uuid())
  quantity  Int
  price     Float
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  colors    String 
  sizes     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id     Int        @id @default(autoincrement())
   uiid              String   @default(uuid())
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
   uiid              String   @default(uuid())
  quantity  Int
  productId Int
  colors    String 
  sizes     String
  product   Product  @relation(fields: [productId], references: [id])
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
   uiid              String   @default(uuid())
  rating    Int
  comment   String?
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
   uiid              String   @default(uuid())
  amount    Float
  method    String   @default("moncash") // Ajoutez ce champ pour indiquer le mode de paiement
  status    String   @default("PENDING") // PENDING, COMPLETED, FAILED
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id             Int       @id @default(autoincrement())
  uiid          String   @default(uuid())
  street         String
  city           String
  state          String
  zipCode        String
  country        String
  telephone      String
  addressDetails String
  userId         Int
  user           User      @relation(fields: [userId], references: [id])
  orders         Order[]   // Relation avec plusieurs commandes
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// site config 
model Caroussel {
  id       Int    @id @default(autoincrement())
  uiid              String   @default(uuid())
  imageUrl String
}

model OffreVisible {
  id        Int     @id @default(autoincrement())
  uiid              String   @default(uuid())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}
model CyloneOffer {
  id        Int     @id @default(autoincrement())
   uiid              String   @default(uuid())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}
