datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int       @id @default(autoincrement())
  name                  String
  email                 String    @unique
  password              String
  role                  UserRole  @default(CUSTOMER) // Utilisation de l'énum avec valeur par défaut
  resetPasswordToken    String?   @unique
  resetPasswordExpires  DateTime?
  orders                Order[]
  cart                  Cart?
  reviews               Review[]
  products              Product[]
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model Product {
  id               Int           @id @default(autoincrement())
  name             String
  description      String
  price            Float
  stock            Int
  imageUrl         String        @default("")     // Field to store the image link
  categoryId       Int
  category         Category      @relation(fields: [categoryId], references: [id])
  reviews          Review[]
  cartItems        CartItem[]
  orderItems       OrderItem[]
  createdBy        Int
  admin            User          @relation(fields: [createdBy], references: [id])
  colors           Color[]       @relation("ProductColors")
  sizes            Size[]        @relation("ProductSizes")
  additionalImages ProductImage[] // Relation to additional images
  offer            String?       // Champs pour ajouter une offre spéciale, facultatif
  discount         Float?        // Champs pour ajouter un rabais, facultatif
}


model ProductImage {
  id        Int     @id @default(autoincrement())
  imageUrls  String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Color {
  id        Int     @id @default(autoincrement())
  name      String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, name: "ProductColors")
}

model Size {
  id        Int     @id @default(autoincrement())
  name      String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, name: "ProductSizes")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Order {
  id                 Int         @id @default(autoincrement())
  total              Float
  status             String      @default("PENDING") // PENDING, COMPLETED, CANCELLED
  userId             Int
  user               User        @relation(fields: [userId], references: [id])
  items              OrderItem[]
  payments           Payment[]
  estimatedDelivery  DateTime?   // Champ pour stocker le temps de livraison estimé
}


model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
}

model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
}

model Review {
  id        Int     @id @default(autoincrement())
  rating    Int
  comment   String?
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
}

model Payment {
  id      Int    @id @default(autoincrement())
  amount  Float 
  method  String @default("moncash") // Ajoutez ce champ pour indiquer le mode de paiement
  status  String @default("PENDING") // PENDING, COMPLETED, FAILED
  orderId Int
  order   Order  @relation(fields: [orderId], references: [id])
}
